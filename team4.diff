diff --git a/pkg/agents/team4/agent2/agent.go b/pkg/agents/team4/agent2/agent.go
index 4fa8c93..94cc068 100644
--- a/pkg/agents/team4/agent2/agent.go
+++ b/pkg/agents/team4/agent2/agent.go
@@ -1,11 +1,11 @@
 package agentTrust
 
 import (
+	"math/rand"
+
 	"github.com/SOMAS2021/SOMAS2021/pkg/infra"
 	"github.com/SOMAS2021/SOMAS2021/pkg/messages"
 	"github.com/SOMAS2021/SOMAS2021/pkg/utils/globalTypes/food"
-	"math/rand"
-
 )
 
 type CustomAgent4 struct {
@@ -132,9 +132,9 @@ func New(baseAgent *infra.Base) (infra.Agent, error) {
 	return &CustomAgent4{
 		Base: baseAgent,
 
-		globalTrust:         0.0,            // TODO: Amend values for correct agent behaviour
-		globalTrustAdd:      9.0,            // TODO: Amend values for correct agent behaviour
-		globalTrustSubtract: -9.0,           // TODO: Amend values for correct agent behaviour
+		globalTrust:         0.0,                      // TODO: Amend values for correct agent behaviour
+		globalTrustAdd:      9.0,                      // TODO: Amend values for correct agent behaviour
+		globalTrustSubtract: -9.0,                     // TODO: Amend values for correct agent behaviour
 		coefficients:        []float32{0.1, 0.2, 0.4}, // TODO: Amend values for correct agent behaviour
 
 		// Initialise the amount of food our agent intends to eat.
@@ -182,32 +182,32 @@ func (a *CustomAgent4) Run() {
 
 func (a *CustomAgent4) HandleAskHP(msg messages.AskHPMessage) {
 	reply := msg.Reply(a.ID(), a.Floor(), a.HP())
-	a.SendMessage(msg.SenderFloor()- a.Floor(), reply)
+	a.SendMessage(msg.SenderFloor()-a.Floor(), reply)
 	a.Log("I received an askHP message from ", infra.Fields{"floor": msg.SenderFloor(), "hp": a.HP()})
 }
 
 func (a *CustomAgent4) HandleAskFoodTaken(msg messages.AskFoodTakenMessage) {
 	reply := msg.Reply(a.ID(), a.Floor(), int(a.lastFoodTaken))
-	a.SendMessage(msg.SenderFloor()- a.Floor(), reply)
+	a.SendMessage(msg.SenderFloor()-a.Floor(), reply)
 	a.Log("I received an askFoodTaken message from ", infra.Fields{"floor": msg.SenderFloor(), "food": a.lastFoodTaken})
 }
 
 func (a *CustomAgent4) HandleAskIntendedFoodTaken(msg messages.AskIntendedFoodIntakeMessage) {
 	reply := msg.Reply(a.ID(), a.Floor(), int(a.IntendedFoodTaken))
-	a.SendMessage(msg.SenderFloor()- a.Floor(), reply)
+	a.SendMessage(msg.SenderFloor()-a.Floor(), reply)
 	a.Log("I received an askIntendedFoodTaken message from ", infra.Fields{"floor": msg.SenderFloor(), "food": a.IntendedFoodTaken})
 }
 
 func (a *CustomAgent4) HandleRequestLeaveFood(msg messages.RequestLeaveFoodMessage) {
 	//fmt.Printf(msg.ID())
 	reply := msg.Reply(a.ID(), a.Floor(), true) // TODO: Change for later dependent on circumstance
-	a.SendMessage(msg.SenderFloor()- a.Floor(), reply)
+	a.SendMessage(msg.SenderFloor()-a.Floor(), reply)
 	a.Log("I received a requestLeaveFood message from ", infra.Fields{"floor": msg.SenderFloor()})
 }
 
 func (a *CustomAgent4) HandleRequestTakeFood(msg messages.RequestTakeFoodMessage) {
 	reply := msg.Reply(a.ID(), a.Floor(), true) // TODO: Change for later dependent on circumstance
-	a.SendMessage(msg.SenderFloor()- a.Floor(), reply)
+	a.SendMessage(msg.SenderFloor()-a.Floor(), reply)
 	a.Log("I received a requestTakeFood message from ", infra.Fields{"floor": msg.SenderFloor()})
 }
 
@@ -215,22 +215,32 @@ func (a *CustomAgent4) HandleResponse(msg messages.BoolResponseMessage) {
 	response := msg.Response() // TODO: Change for later dependent on circumstance
 	if !response {
 		a.globalTrust += a.globalTrustSubtract * a.coefficients[0] // TODO: adapt for other conditions
-	}else { // Iterating through all messages in agent memory
-		for i := 0; i < len(a.sentMessages.messages); i++ { 
+	} else { // Iterating through all messages in agent memory
+		for i := 0; i < len(a.sentMessages.messages); i++ {
 			if msg.RequestId() == a.sentMessages.messages[i].ID() {
 				a.Log("Received a message ", infra.Fields{"sender_uuid": msg.ID(), "sentmessage_uuid": a.sentMessages.messages[i].ID()})
 				sentMessage := a.sentMessages.messages[i]
 				// fooType := reflect.TypeOf(sentMessage)
 				// 	for j := 0; j < fooType.NumMethod(); j++ {
-    			// 		method := fooType.Method(j)
-    			// 		fmt.Println(method.Name)
-				
+				// 		method := fooType.Method(j)
+				// 		fmt.Println(method.Name)
+
 				//12 is RequestLeaveFoodMessage.MessageType(), 13 is RequestTakeFoodMessage.MessageType()
-				if sentMessage.MessageType() == 12 && a.sentMessages.direction[i] == 1 && sentMessage.Request() <= a.CurrPlatFood(){   
-					a.globalTrust += a.globalTrustAdd * a.coefficients[1]
-				} else if sentMessage.MessageType() == 12 && a.sentMessages.direction[i] == 1 && sentMessage.Request()>= a.CurrPlatFood(){
-					a.globalTrust += a.globalTrustSubtract * a.coefficients[2]
-				}  
+
+				if sentMessage.MessageType() == 12 && a.sentMessages.direction[i] == 1 {
+					reqMessage := sentMessage.(messages.RequestMessage)
+					if food.FoodType(reqMessage.Request()) <= a.CurrPlatFood() {
+						a.globalTrust += a.globalTrustAdd * a.coefficients[1]
+					} else if food.FoodType(reqMessage.Request()) > a.CurrPlatFood() {
+						a.globalTrust += a.globalTrustSubtract * a.coefficients[2]
+					}
+				}
+
+				// if sentMessage.MessageType() == 12 && a.sentMessages.direction[i] == 1 && food.FoodType(sentMessage.(messages.RequestMessage).Request()) <= a.CurrPlatFood() {
+				// 	a.globalTrust += a.globalTrustAdd * a.coefficients[1]
+				// } else if sentMessage.MessageType() == 12 && a.sentMessages.direction[i] == 1 && food.FoodType(sentMessage.(messages.RequestMessage).Request()) >= a.CurrPlatFood() {
+				// 	a.globalTrust += a.globalTrustSubtract * a.coefficients[2]
+				// }
 			}
 		}
 	}
     